{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\"; // const initialState = [\n//   { id: \"1\", cname: \"Management MBA\",desc:\"Highly acclaimed masters programmes available now in Master of Business Administration. \"},\n//   { id: \"2\", cname: \"Computer Application-BCA\",desc:\"The BCA course is a full time three years (six semesters) Bachelor's Degree in Computer Application.\" },\n// ]\n\nconst courseSlice = createSlice({\n  name: \"courses\",\n  initialState: {\n    courses: [],\n    isFetching: false,\n    error: false\n  },\n  reducers: {\n    //Get all users\n    getCourseStart: state => {\n      state.isFetching = true;\n      state.error = false;\n    },\n    getCourseSuccess: (state, action) => {\n      state.isFetching = false;\n      state.courses = action.payload;\n    },\n    getCourseFailure: state => {\n      state.isFetching = false;\n      state.error = true;\n    },\n    add_Course: (state, action) => {\n      console.log(\"====================================\");\n      console.log(action);\n      console.log(\"====================================\");\n      state.push(action.payload);\n    },\n    updateCourse: (state, action) => {\n      const {\n        id,\n        cname,\n        desc\n      } = action.payload;\n      const existingCourse = state.find(course => course.id === id);\n\n      if (existingCourse) {\n        existingCourse.cname = cname;\n        existingCourse.desc = desc;\n      }\n    },\n    deleteCourse: (state, action) => {\n      const {\n        id\n      } = action.payload;\n      const existingCourse = state.find(course => course.id === id);\n\n      if (existingCourse) {\n        return state.filter(course => course.id !== id);\n      }\n    }\n  }\n});\nexport const {\n  getCourseStart,\n  getCourseFailure,\n  getCourseSuccess,\n  add_Course,\n  updateCourse,\n  deleteCourse\n} = courseSlice.actions;\nexport default courseSlice.reducer;","map":{"version":3,"names":["createSlice","courseSlice","name","initialState","courses","isFetching","error","reducers","getCourseStart","state","getCourseSuccess","action","payload","getCourseFailure","add_Course","console","log","push","updateCourse","id","cname","desc","existingCourse","find","course","deleteCourse","filter","actions","reducer"],"sources":["D:/python/Student-Registration/client/src/features/users/courseSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n// const initialState = [\r\n//   { id: \"1\", cname: \"Management MBA\",desc:\"Highly acclaimed masters programmes available now in Master of Business Administration. \"},\r\n//   { id: \"2\", cname: \"Computer Application-BCA\",desc:\"The BCA course is a full time three years (six semesters) Bachelor's Degree in Computer Application.\" },\r\n// ]\r\n\r\nconst courseSlice = createSlice({\r\n  name: \"courses\",\r\n  initialState:{\r\n    courses: [],\r\n    isFetching: false,\r\n    error: false, \r\n  },\r\n  reducers: {\r\n       //Get all users\r\n       getCourseStart: (state) => {\r\n        state.isFetching = true;\r\n        state.error = false;\r\n      },\r\n      getCourseSuccess: (state, action) => {\r\n        state.isFetching = false;\r\n        state.courses = action.payload;\r\n      },\r\n      getCourseFailure: (state) => {\r\n        state.isFetching = false;\r\n        state.error = true;\r\n      },\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    add_Course: (state, action) => {\r\n      console.log(\"====================================\");\r\n      console.log(action);\r\n      console.log(\"====================================\");\r\n      state.push(action.payload);\r\n    },\r\n    updateCourse: (state, action) => {\r\n      const { id, cname, desc } = action.payload;\r\n      const existingCourse = state.find((course) => course.id === id);\r\n      if (existingCourse) {\r\n        existingCourse.cname = cname;\r\n        existingCourse.desc = desc;\r\n      }\r\n    },\r\n    deleteCourse: (state, action) => {\r\n      const { id } = action.payload;\r\n      const existingCourse = state.find((course) => course.id === id);\r\n      if (existingCourse) {\r\n        return state.filter((course) => course.id !== id);\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const {getCourseStart,getCourseFailure,getCourseSuccess, add_Course, updateCourse, deleteCourse } = courseSlice.actions;\r\nexport default courseSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B,C,CAEA;AACA;AACA;AACA;;AAEA,MAAMC,WAAW,GAAGD,WAAW,CAAC;EAC9BE,IAAI,EAAE,SADwB;EAE9BC,YAAY,EAAC;IACXC,OAAO,EAAE,EADE;IAEXC,UAAU,EAAE,KAFD;IAGXC,KAAK,EAAE;EAHI,CAFiB;EAO9BC,QAAQ,EAAE;IACL;IACAC,cAAc,EAAGC,KAAD,IAAW;MAC1BA,KAAK,CAACJ,UAAN,GAAmB,IAAnB;MACAI,KAAK,CAACH,KAAN,GAAc,KAAd;IACD,CALK;IAMNI,gBAAgB,EAAE,CAACD,KAAD,EAAQE,MAAR,KAAmB;MACnCF,KAAK,CAACJ,UAAN,GAAmB,KAAnB;MACAI,KAAK,CAACL,OAAN,GAAgBO,MAAM,CAACC,OAAvB;IACD,CATK;IAUNC,gBAAgB,EAAGJ,KAAD,IAAW;MAC3BA,KAAK,CAACJ,UAAN,GAAmB,KAAnB;MACAI,KAAK,CAACH,KAAN,GAAc,IAAd;IACD,CAbK;IA+BRQ,UAAU,EAAE,CAACL,KAAD,EAAQE,MAAR,KAAmB;MAC7BI,OAAO,CAACC,GAAR,CAAY,sCAAZ;MACAD,OAAO,CAACC,GAAR,CAAYL,MAAZ;MACAI,OAAO,CAACC,GAAR,CAAY,sCAAZ;MACAP,KAAK,CAACQ,IAAN,CAAWN,MAAM,CAACC,OAAlB;IACD,CApCO;IAqCRM,YAAY,EAAE,CAACT,KAAD,EAAQE,MAAR,KAAmB;MAC/B,MAAM;QAAEQ,EAAF;QAAMC,KAAN;QAAaC;MAAb,IAAsBV,MAAM,CAACC,OAAnC;MACA,MAAMU,cAAc,GAAGb,KAAK,CAACc,IAAN,CAAYC,MAAD,IAAYA,MAAM,CAACL,EAAP,KAAcA,EAArC,CAAvB;;MACA,IAAIG,cAAJ,EAAoB;QAClBA,cAAc,CAACF,KAAf,GAAuBA,KAAvB;QACAE,cAAc,CAACD,IAAf,GAAsBA,IAAtB;MACD;IACF,CA5CO;IA6CRI,YAAY,EAAE,CAAChB,KAAD,EAAQE,MAAR,KAAmB;MAC/B,MAAM;QAAEQ;MAAF,IAASR,MAAM,CAACC,OAAtB;MACA,MAAMU,cAAc,GAAGb,KAAK,CAACc,IAAN,CAAYC,MAAD,IAAYA,MAAM,CAACL,EAAP,KAAcA,EAArC,CAAvB;;MACA,IAAIG,cAAJ,EAAoB;QAClB,OAAOb,KAAK,CAACiB,MAAN,CAAcF,MAAD,IAAYA,MAAM,CAACL,EAAP,KAAcA,EAAvC,CAAP;MACD;IACF;EAnDO;AAPoB,CAAD,CAA/B;AA8DA,OAAO,MAAM;EAACX,cAAD;EAAgBK,gBAAhB;EAAiCH,gBAAjC;EAAmDI,UAAnD;EAA+DI,YAA/D;EAA6EO;AAA7E,IAA8FxB,WAAW,CAAC0B,OAAhH;AACP,eAAe1B,WAAW,CAAC2B,OAA3B"},"metadata":{},"sourceType":"module"}